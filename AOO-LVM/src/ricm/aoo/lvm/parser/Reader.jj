/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{
  DEBUG_PARSER=true;  STATIC = true;}PARSER_BEGIN(Reader)package ricm.aoo.lvm;

import ricm.aoo.lvm.olist.*;
import ricm.aoo.lvm.utils.LVMException;
import java.io.*;

public class Reader{
  /** le support de lecture */  protected static java.io.Reader in = new BufferedReader (new InputStreamReader (System.in));

  /** lecture d'une S-EXPR à partir au terminal
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read() throws LVMException  {
    Reader parser = new Reader(in);
    SExpr s;
    try    {      s = parser.SEXPR();    }    catch(Exception e)    {      throw (LVMException)e;    }
	return s;  }

  /** lecture d'une S-EXPR à de la chaine
   * @param s : la chaîne
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read(String s) throws LVMException  {
     return new Nil();  }

  /** évaluation de la séquence S-Exprs à partir du fichiers
   * @param s : le nom du fichier
   * @return SExpr : symbole du nom du fichier
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr importe(String s) throws LVMException
  {	return new Nil();
  }}PARSER_END(Reader)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < COT : "'" >| < PO : "(" >| < PF : ")" >
| < PT : "." >}TOKEN :{  < IDENT : (< SYMB >)+ >| < #SYMB : [ "a"-"z" , "A"-"Z" , "1"-"9" , "-" , "." ] >}SExpr SEXPR () :{  SExpr se;}{  	< COT > se=SEXPR()  	{    	return new SCons(new Symbol("quote"), se);  	}|
	se=ATOME()  	{   		return se;  	}|
	< PO > se=DEB_LIST()	{
		return se;	}}
SExpr ATOME() :
{
	String s;
}
{
  	s=SYMBOLE()
  	{		return new Symbol(s);
	}
}

String SYMBOLE() :
{
	Token var;
}
{	var=<IDENT>	{	  return ""+var+"";	}
}

SExpr DEB_LIST () :
{
  	SExpr f, l;
}
{  	f=NIL()  	{  	  	return f;
  	}
| 	l=LIST() <PF>	{  		return l;
  	}
}

SExpr NIL () : {}
{
	<PF>	{	  return new Nil();
	}}

SExpr LIST () :
{
	SExpr first, rest;
}
{
	first=SEXPR() rest=FIN_LIST()
	{	  return new SCons(first, rest);
	}
}

SExpr FIN_LIST () :
{
    SExpr pp, se;
}
{	<PT> pp=SEXPR()	{	 	return pp;	} 
| 	se=SUITE_SEXPR()	{  		return se;  	}  
}

SExpr SUITE_SEXPR () :{  	SExpr suite, elt;}{ 	elt=SEXPR() suite=SUITE_SEXPR()  	{    	return new SCons(elt, suite);  	}
| 
	{	 	return new Nil();
	}
}  