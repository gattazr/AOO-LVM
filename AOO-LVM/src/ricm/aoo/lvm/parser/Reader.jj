/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  DEBUG_PARSER = true;  STATIC = false;}PARSER_BEGIN(Reader)package ricm.aoo.lvm;

import ricm.aoo.lvm.kernel.*;
import java.io.*;

public class Reader{
  	public static void main(String args []) throws ParseException {
		String command;
		while (true){
			System.out.println("Reading from standard input...");
			System.out.print("Enter an expression like LISP :");
			try{
			  	command = Reader.read().toString();
				System.out.println("Expression lue au clavier : "+command);
				SExpr e=Reader.read(command);				command = e.toString();				System.out.println("Expression lue depuis un string : "+command);
  			}
  			catch (Exception e){
				System.out.println("NOK.");
				System.out.println(e.getMessage());
				//Reader.ReInit(System.in);
			}
			catch (Error e){
				System.out.println("Oops.");
				System.out.println(e.getMessage());
				break;
			}
		}
  }
	
	
  /** lecture d'une S-EXPR à partir au terminal
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read() throws LVMException  {
    Reader parser = new Reader( new BufferedReader (new InputStreamReader (System.in)));
    SExpr se;
    String wDEBUG = System.getProperty("DEBUG_PARSER");
	if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))	{		parser.disable_tracing();
	}
    try    {      se = parser.SEXPR();    }    catch(Exception e)    {      throw new LVMException("Parser Error: "+e);    }
	return se;  }

  /** lecture d'une S-EXPR à de la chaine
   * @param s : la chaîne
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read(String s) throws LVMException  {
	Reader parser = new Reader(new BufferedReader (new StringReader (s)));
	SExpr se;
	String wDEBUG = System.getProperty("DEBUG_PARSER");
	if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))
	{
		parser.disable_tracing();
	}
    try
    {
      se = parser.SEXPR();
    }
    catch(Exception e)
    {
      throw new LVMException("Parser Error: "+e);
    }
	return se;  }

  /** évaluation de la séquence S-Exprs à partir du fichiers
   * Gère aussi les problèmes de lecture/ecriture et d'existence de fichier
   * @param s : le nom du fichier
   * @return SExpr : symbole du nom du fichier
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr importe(Reader parser) throws LVMException, EOFException
  {
	SExpr se;
  	String wDEBUG = System.getProperty("DEBUG_PARSER");	try
    {
      if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))
      {
		parser.disable_tracing();
	  }
      se = parser.SEXPR();
    }
    catch(Exception e)
    {
      if(e.getMessage().contains("EOF"))	  {		throw new EOFException();
      }
      throw new LVMException("Parser Error: "+e);
    }
	return se;
  }}PARSER_END(Reader)
//les caractères ignorés
SKIP :
{
	" " | "\t" | "\r" | "\n" //attention elimine la notion de fin de ligne
	| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007" 
	| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012"
	| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A"
	| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F"
}

MORE :
{	
	"//" : IN_SL_COMMENT
| 	"/*" : IN_ML_COMMENT
}

<IN_SL_COMMENT> SPECIAL_TOKEN : {<SL_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT}
<IN_SL_COMMENT> SPECIAL_TOKEN : {<ML_COMMENT: "*/"> : DEFAULT}
<IN_SL_COMMENT, IN_ML_COMMENT> SKIP : { < ~[] >} // les lexemes du langage

TOKEN : /* OPERATORS */{  < COT : "'" >| < PO : "(" >| < PF : ")" >
| < PT : "." >}TOKEN :{  < IDENT : (< SYMB >)+ >| < #SYMB : [ "a"-"z" , "A"-"Z" , "1"-"9" , "-" , ".", "/" ] >}SExpr SEXPR () :{  SExpr se;}{  	< COT > se=SEXPR()  	{    	return new SCons(new Symbol("quote"), new SCons(se, Nil.NIL));  	}|
	se=ATOME()  	{   		return se;  	}|
	< PO > se=DEB_LIST()	{
		return se;	}}
SExpr ATOME() :
{
	String s;
}
{
  	s=SYMBOLE()
  	{
		if(s.toUpperCase().equals("NIL"))		{
		  return Nil.NIL;		}
		else		{
		  return new Symbol(s);		}		
	}
}

String SYMBOLE() :
{
	Token var;
}
{	var=<IDENT>	{	  return ""+var+"";	}
}

SExpr DEB_LIST () :
{
  	SExpr f, l;
}
{  	f=NIL()  	{  	  	return f;
  	}
| 	l=LIST() <PF>	{  		return l;
  	}
}

SExpr NIL () : {}
{
	<PF>	{	  return Nil.NIL;
	}}

SExpr LIST () :
{
	SExpr first, rest;
}
{
	first=SEXPR() rest=FIN_LIST()
	{	  return new SCons(first, rest);
	}
}

SExpr FIN_LIST () :
{
    SExpr pp, se;
}
{	<PT> pp=SEXPR()	{	 	return pp;	} 
| 	se=SUITE_SEXPR()	{  		return se;  	}  
}

SExpr SUITE_SEXPR () :{  	SExpr suite, elt;}{ 	elt=SEXPR() suite=SUITE_SEXPR()  	{    	return new SCons(elt, suite);  	}
| 
	{	 	return Nil.NIL;
	}
}  