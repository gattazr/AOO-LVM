/* Reader.java */
/* Generated By:JavaCC: Do not edit this line. Reader.java */
package ricm.aoo.lvm.parser;

import ricm.aoo.lvm.LVMException;
import ricm.aoo.lvm.kernel.*;
import java.io.*;

public class Reader implements ReaderConstants {
        public static void main(String args []) throws ParseException {
                String command;
                while (true){
                        System.out.println("Reading from standard input...");
                        System.out.print("Enter an expression like LISP :");
                        try{
                                command = Reader.read().toString();
                                System.out.println("Expression lue au clavier : "+command);
                                SExpr e=Reader.read(command);
                                command = e.toString();
                                System.out.println("Expression lue depuis un string : "+command);
                        }
                        catch (Exception e){
                                System.out.println("NOK.");
                                System.out.println(e.getMessage());
                        }
                        catch (Error e){
                                System.out.println("Oops.");
                                System.out.println(e.getMessage());
                                break;
                        }
                }
  }


  /** lecture d'une S-EXPR à partir au terminal
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read() throws LVMException
  {
    Reader parser = new Reader( new BufferedReader (new InputStreamReader (System.in)));
    SExpr se;
    String wDEBUG = System.getProperty("DEBUG_PARSER");
        if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))
        {
                parser.disable_tracing();
        }
    try
    {
      se = parser.SEXPR();
    }
    catch(Exception e)
    {
      throw new LVMException("Parser Error: "+e);
    }
        return se;
  }

  /** lecture d'une S-EXPR à de la chaine
   * @param s : la chaîne
   * @return SExpr : la SExpr construite
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr read(String s) throws LVMException
  {
        Reader parser = new Reader(new BufferedReader (new StringReader (s)));
        SExpr se;
        String wDEBUG = System.getProperty("DEBUG_PARSER");
        if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))
        {
                parser.disable_tracing();
        }
    try
    {
      se = parser.SEXPR();
    }
    catch(Exception e)
    {
      throw new LVMException("Parser Error: "+e);
    }
        return se;
  }

  /** évaluation de la séquence S-Exprs à partir du fichiers
   * Gère aussi les problèmes de lecture/ecriture et d'existence de fichier
   * @param s : le nom du fichier
   * @return SExpr : symbole du nom du fichier
   * @throws LVMException une erreur de syntaxe
   */
  public static SExpr importe(Reader parser) throws LVMException, EOFException
  {
        SExpr se;
        String wDEBUG = System.getProperty("DEBUG_PARSER");
        try
    {
      if(wDEBUG == null || wDEBUG.toLowerCase().equals("false"))
      {
                parser.disable_tracing();
          }
      se = parser.SEXPR();
    }
    catch(Exception e)
    {
      if(e.getMessage().contains("EOF"))
          {
                throw new EOFException();
      }
      throw new LVMException("Parser Error: "+e);
    }
        return se;
  }

  final public SExpr SEXPR() throws ParseException {
    trace_call("SEXPR");
    try {SExpr se;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COT:{
        jj_consume_token(COT);
        se = SEXPR();
{if ("" != null) return new SCons(new Symbol("quote"), new SCons(se, Nil.NIL));}
        break;
        }
      case IDENT:{
        se = ATOME();
{if ("" != null) return se;}
        break;
        }
      case PO:{
        jj_consume_token(PO);
        se = DEB_LIST();
{if ("" != null) return se;}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SEXPR");
    }
  }

  final public SExpr ATOME() throws ParseException {
    trace_call("ATOME");
    try {String s;
      s = SYMBOLE();
if(s.toUpperCase().equals("NIL"))
                {
                  {if ("" != null) return Nil.NIL;}
                }
                else
                {
                  {if ("" != null) return new Symbol(s);}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ATOME");
    }
  }

  final public String SYMBOLE() throws ParseException {
    trace_call("SYMBOLE");
    try {Token var;
      var = jj_consume_token(IDENT);
{if ("" != null) return ""+var+"";}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SYMBOLE");
    }
  }

  final public SExpr DEB_LIST() throws ParseException {
    trace_call("DEB_LIST");
    try {SExpr f, l;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PF:{
        f = NIL();
{if ("" != null) return f;}
        break;
        }
      case COT:
      case PO:
      case IDENT:{
        l = LIST();
        jj_consume_token(PF);
{if ("" != null) return l;}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DEB_LIST");
    }
  }

  final public SExpr NIL() throws ParseException {
    trace_call("NIL");
    try {
      jj_consume_token(PF);
{if ("" != null) return Nil.NIL;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NIL");
    }
  }

  final public SExpr LIST() throws ParseException {
    trace_call("LIST");
    try {SExpr first, rest;
      first = SEXPR();
      rest = FIN_LIST();
{if ("" != null) return new SCons(first, rest);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("LIST");
    }
  }

  final public SExpr FIN_LIST() throws ParseException {
    trace_call("FIN_LIST");
    try {SExpr pp, se;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PT:{
        jj_consume_token(PT);
        pp = SEXPR();
{if ("" != null) return pp;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        se = SUITE_SEXPR();
{if ("" != null) return se;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FIN_LIST");
    }
  }

  final public SExpr SUITE_SEXPR() throws ParseException {
    trace_call("SUITE_SEXPR");
    try {SExpr suite, elt;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COT:
      case PO:
      case IDENT:{
        elt = SEXPR();
        suite = SUITE_SEXPR();
{if ("" != null) return new SCons(elt, suite);}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
{if ("" != null) return Nil.NIL;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SUITE_SEXPR");
    }
  }

  /** Generated Token Manager. */
  public ReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1300,0x1700,0x800,0x1300,};
   }

  /** Constructor with InputStream. */
  public Reader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Reader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Reader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Reader(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
